/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import Anthropic from "@anthropic-ai/sdk";
import claude from "@anthropic-ai/tokenizer/claude.json" assert { type: "json" };
import { Tiktoken } from "js-tiktoken";
export function countTokens(text) {
    const tokenizer = getTokenizer();
    const encoded = tokenizer.encode(text.normalize("NFKC"));
    return encoded.length;
}
export function getTokenizer() {
    const tiktokenBPE = {
        pat_str: claude.pat_str,
        special_tokens: claude.special_tokens,
        bpe_ranks: claude.bpe_ranks,
    };
    return new Tiktoken(tiktokenBPE);
}
export default async (inputs) => {
    const values = inputs;
    const model = values.model || "claude-2";
    if (!values.CLAUDE_API_KEY)
        throw new Error("Text completion requires `CLAUDE_API_KEY` input");
    if (!values.text)
        throw new Error("Text completion requires `text` input");
    const inputTokenCount = countTokens(values.text);
    const maxTokens = values.maxTokens || 100000 - inputTokenCount;
    if (maxTokens <= 0)
        throw new Error(`Text completion requires 'text' input to be shorter than the model's max token count of 100,000 tokens. Your input was ${inputTokenCount} tokens.`);
    let output = "";
    try {
        const anthropic = new Anthropic({
            apiKey: values.CLAUDE_API_KEY,
        });
        const completion = await anthropic.completions.create({
            model,
            max_tokens_to_sample: maxTokens,
            prompt: `${Anthropic.HUMAN_PROMPT} ${values.text}${Anthropic.AI_PROMPT}`,
            stream: false, // TODO - make this a parameter
        });
        output =
            completion.completion.length > 0 ? completion.completion : "No data";
    }
    catch (error) {
        if (error.response) {
            console.log(error.response.status);
            console.log(error.response.data);
        }
        else {
            console.log(error.message);
        }
        output = "error";
    }
    return { completion: output };
};
//# sourceMappingURL=generate-completion.js.map