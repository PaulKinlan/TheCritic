/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { BoardRunner } from "@google-labs/breadboard";
import { SchemaBuilder } from "@google-labs/breadboard/kits";
export default {
    describe: async (inputs) => {
        return {
            inputSchema: new SchemaBuilder()
                .addInputs(inputs)
                .addProperties({
                path: {
                    title: "path",
                    description: "The path to the board to import.",
                    type: "string",
                },
                graph: {
                    title: "graph",
                    description: "The graph descriptor of the board to import.",
                    type: "object",
                },
            })
                .setAdditionalProperties(true)
                .build(),
            outputSchema: new SchemaBuilder().addProperties({
                board: {
                    title: "board",
                    description: "The imported board.",
                    type: "object",
                },
            }),
        };
    },
    invoke: async (inputs, context) => {
        const { path, graph, ...args } = inputs;
        const base = context.base || new URL(import.meta.url);
        const board = graph
            ? graph.runOnce // TODO: Hack! Use JSON schema or so instead.
                ? { ...graph }
                : await BoardRunner.fromGraphDescriptor(graph)
            : path
                ? await BoardRunner.load(path, {
                    base,
                    outerGraph: context.outerGraph,
                })
                : undefined;
        if (!board)
            throw Error("No board provided");
        board.args = args;
        return { board: { kind: "board", board } };
    },
};
//# sourceMappingURL=import.js.map