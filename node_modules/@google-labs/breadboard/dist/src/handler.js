/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const getHandlerFunction = (handler) => {
    if (handler instanceof Function)
        return handler;
    if (handler.invoke)
        return handler.invoke;
    throw new Error("Invalid handler");
};
export const callHandler = async (handler, inputs, context) => {
    // if (handler instanceof Function) return handler(inputs, context);
    // if (handler.invoke) return handler.invoke(inputs, context);
    const handlerFunction = getHandlerFunction(handler);
    return new Promise((resolve) => {
        handlerFunction(inputs, context)
            .then(resolve)
            .catch((error) => {
            resolve({ $error: { error } });
        });
    });
};
export const handlersFromKits = (kits) => {
    return kits.reduce((handlers, kit) => {
        // If multiple kits have the same handler, the kit earlier in the list
        // gets precedence, including upstream kits getting precedence over kits
        // defined in the graph.
        //
        // TODO: This means kits are fallback, consider non-fallback as well.
        return { ...kit.handlers, ...handlers };
    }, {});
};
//# sourceMappingURL=handler.js.map