/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { GraphDescriptor, GraphMetadata } from "@google-labs/breadboard";
import { InputValues, OutputValues, NodeHandler, NodeHandlers, AbstractNode, ScopeInterface, InvokeCallbacks, ScopeConfig, StateInterface } from "./types.js";
export declare class Scope implements ScopeInterface {
    #private;
    parentLexicalScope?: Scope;
    parentDynamicScope?: Scope;
    constructor(config?: ScopeConfig);
    addHandlers(handlers: NodeHandlers): void;
    getHandler<I extends InputValues = InputValues, O extends OutputValues = OutputValues>(name: string): NodeHandler<I, O> | undefined;
    pin<I extends InputValues = InputValues, O extends OutputValues = OutputValues>(node: AbstractNode<I, O>): void;
    compactPins(): void;
    getPinnedNodes(): AbstractNode[];
    addCallbacks(callbacks: InvokeCallbacks): void;
    invoke(node?: AbstractNode | AbstractNode[] | false, state?: StateInterface): Promise<void>;
    invokeOneRound(inputs?: InputValues, node?: AbstractNode | false | undefined, state?: StateInterface): Promise<OutputValues>;
    serialize(metadata?: GraphMetadata, node?: AbstractNode): Promise<GraphDescriptor>;
}
//# sourceMappingURL=scope.d.ts.map