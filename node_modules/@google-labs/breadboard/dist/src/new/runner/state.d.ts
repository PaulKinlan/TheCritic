/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { AbstractNode, InputValues, OutputValues, OutputDistribution, EdgeInterface, StateInterface, NodeValue } from "./types.js";
export declare class State implements StateInterface {
    queue: AbstractNode[];
    inputs: Map<AbstractNode, Map<string, NodeValue[]>>;
    constants: Map<AbstractNode, Partial<InputValues>>;
    controlWires: Map<AbstractNode, AbstractNode[]>;
    haveRun: Set<AbstractNode>;
    queueUp(node: AbstractNode): void;
    next(): AbstractNode;
    done(): boolean;
    /**
     * Compute required inputs from edges and compare with present inputs
     *
     * Required inputs are
     *  - for all named incoming edges, the presence of any data, irrespective of
     *    which node they come from
     *  - at least one of the incoming empty or * wires, if present (TODO: Is that
     *    correct?)
     *  - data from at least one node if it already ran
     *
     * @returns false if none are missing, otherwise string[] of missing inputs.
     * NOTE: A node with no incoming wires returns an empty array after  first
     * run.
     */
    missingInputs(node: AbstractNode): string[] | false;
    shiftInputs<I extends InputValues>(node: AbstractNode<I>): I;
    processResult(node: AbstractNode, result: OutputValues): OutputDistribution;
    distributeResults(edge: EdgeInterface, inputs: InputValues): string[];
}
//# sourceMappingURL=state.d.ts.map