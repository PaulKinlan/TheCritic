/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { BuilderNode } from "./node.js";
import { getCurrentContextScope } from "./default-scope.js";
import { handlersFromKit } from "../runner/kits.js";
export function addNodeType(name, handler) {
    if (name)
        registerNodeType(name, handler);
    return ((config) => {
        return new BuilderNode(name ?? handler, getCurrentContextScope(), config).asProxy();
    });
}
export function registerNodeType(name, handler) {
    getCurrentContextScope().addHandlers({ [name]: handler });
}
// Extracts handlers from kits and creates node factories for them.
export function addKit(ctr, namespacePrefix = "") {
    const kit = new ctr({});
    const handlers = handlersFromKit(kit);
    const removeNamespacePrefix = namespacePrefix
        ? (name) => {
            return name.startsWith(namespacePrefix)
                ? name.slice(namespacePrefix.length)
                : name;
        }
        : (name) => name;
    return Object.fromEntries(Object.entries(handlers).map(([name, handler]) => [
        removeNamespacePrefix(name),
        addNodeType(name, handler),
    ]));
}
//# sourceMappingURL=kits.js.map