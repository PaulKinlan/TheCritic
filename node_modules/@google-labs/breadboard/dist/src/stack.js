/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { loadRunnerState, saveRunnerState } from "./serialization.js";
// TODO: Support stream serialization somehow.
// see https://github.com/breadboard-ai/breadboard/issues/423
export class StackManager {
    #stack;
    #result;
    constructor(stack) {
        this.#stack = structuredClone(stack) || [];
    }
    onGraphStart() {
        this.#stack.push({ graph: 0, node: 0 });
    }
    onNodeStart(result) {
        this.#stack[this.#stack.length - 1].node++;
        this.#result = result;
    }
    onNodeEnd() {
        // TODO: implement
    }
    onGraphEnd() {
        // TODO: implement
    }
    async state() {
        // Assemble the stack from existing pieces.
        const stack = structuredClone(this.#stack);
        if (this.#result) {
            stack[stack.length - 1].state = await saveRunnerState("nodestart", this.#result);
        }
        return stack;
    }
}
export const traversalResultFromStack = (stack) => {
    const { state } = stack[stack.length - 1];
    return state ? loadRunnerState(state).state : undefined;
};
//# sourceMappingURL=stack.js.map