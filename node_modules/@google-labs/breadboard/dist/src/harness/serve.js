/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { Board } from "../board.js";
import { InitServer } from "../remote/init.js";
import { RunServer } from "../remote/run.js";
import { PortDispatcher, WorkerClientTransport, WorkerServerTransport, } from "../remote/worker.js";
import { configureKits } from "./kits.js";
import { baseURL } from "./url.js";
const isInWorker = () => {
    return (
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    typeof WorkerGlobalScope !== "undefined" &&
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        self instanceof WorkerGlobalScope);
};
const maybeCreateWorker = () => {
    throw new Error("Not implemented");
};
class WorkerTransportFactory {
    #dispatcher;
    constructor(dispatcher) {
        this.#dispatcher = dispatcher;
    }
    client(label) {
        return new WorkerClientTransport(this.#dispatcher.send(label));
    }
    server(label) {
        return new WorkerServerTransport(this.#dispatcher.receive(label));
    }
}
const getBoardURL = async (config, factory) => {
    const url = config.url;
    if (url)
        return url;
    const initServer = new InitServer(factory.server("load"));
    return await initServer.serve();
};
/**
 * Start the Breadboard run server. Currently, this function is somewhat
 * specialized to the worker transport, but (one hopes) will eventually
 * grow up to be more general and flexible.
 * @param config - The configuration for the server.
 * @returns - a promise that resolves when the server is done serving.
 */
export const serve = async (config) => {
    if (config.transport !== "worker") {
        throw new Error("Only worker transport is supported at this time.");
    }
    const inWorker = isInWorker();
    const worker = inWorker ? self : maybeCreateWorker();
    const factory = new WorkerTransportFactory(new PortDispatcher(worker));
    const kits = configureKits(config.kits, factory);
    // TODO: Figure out how to initalize.
    const isRunServer = true;
    if (!isRunServer)
        return;
    const server = new RunServer(factory.server("run"));
    const url = await getBoardURL(config, factory);
    const base = baseURL(config);
    const runner = await Board.load(url, { base });
    return server.serve(runner, !!config.diagnostics, { kits });
};
/**
 * A helper function to define a serve configuration. Especially useful in
 * TypeScript, where the type of the configuration is inferred from the
 * argument.
 * @param config - The configuration for the server.
 * @returns - The configuration for the server.
 */
export const defineServeConfig = (config) => {
    return config;
};
//# sourceMappingURL=serve.js.map