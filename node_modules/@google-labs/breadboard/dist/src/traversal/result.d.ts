/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import type { Edge, QueuedNodeValuesState, InputValues, NodeDescriptor, OutputValues, CompletedNodeOutput, TraversalResult } from "../types.js";
export declare class MachineResult implements TraversalResult {
    descriptor: NodeDescriptor;
    inputs: InputValues;
    missingInputs: string[];
    opportunities: Edge[];
    newOpportunities: Edge[];
    state: QueuedNodeValuesState;
    outputsPromise?: Promise<OutputValues>;
    pendingOutputs: Map<symbol, Promise<CompletedNodeOutput>>;
    constructor(descriptor: NodeDescriptor, inputs: InputValues, missingInputs: string[], opportunities: Edge[], newOpportunities: Edge[], state: QueuedNodeValuesState, pendingOutputs: Map<symbol, Promise<CompletedNodeOutput>>);
    /**
     * `true` if the machine decided that the node should be skipped, rather than
     * visited.
     */
    get skip(): boolean;
    static fromObject(o: TraversalResult): MachineResult;
}
//# sourceMappingURL=result.d.ts.map