/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { BoardRunner } from "../runner.js";
import { InputValues, NodeHandlerContext, OutputValues, RunState } from "../types.js";
import { AnyProbeMessage, AnyRunRequestMessage, AnyRunResponseMessage, ClientTransport, ServerTransport } from "./protocol.js";
type RunServerTransport = ServerTransport<AnyRunRequestMessage, AnyRunResponseMessage>;
export declare class RunServer {
    #private;
    constructor(transport: RunServerTransport);
    serve(runner: BoardRunner, diagnostics?: boolean, context?: NodeHandlerContext): Promise<void>;
}
type RunClientTransport = ClientTransport<AnyRunRequestMessage, AnyRunResponseMessage>;
type ReplyFunction = {
    reply: (chunk: AnyRunRequestMessage[1]) => Promise<void>;
};
type ClientRunResultFromMessage<ResponseMessage> = ResponseMessage extends [
    string,
    object,
    RunState?
] ? {
    type: ResponseMessage[0];
    data: ResponseMessage[1];
    state?: RunState;
} & ReplyFunction : never;
export type AnyClientRunResult = ClientRunResultFromMessage<AnyRunResponseMessage>;
export type AnyProbeClientRunResult = ClientRunResultFromMessage<AnyProbeMessage>;
export type ClientRunResult<T> = T & ReplyFunction;
export declare class RunClient {
    #private;
    constructor(clientTransport: RunClientTransport);
    run(state?: RunState): AsyncGenerator<AnyClientRunResult>;
    runOnce(inputs: InputValues): Promise<OutputValues>;
}
export {};
//# sourceMappingURL=run.d.ts.map