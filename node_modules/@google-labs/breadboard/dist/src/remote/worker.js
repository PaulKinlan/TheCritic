/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { portFactoryToStreams, portToStreams, streamFromReader, streamFromWriter, } from "../stream.js";
const DISPATCHER_SEND = "port-dispatcher-sendport";
export class PortDispatcher {
    #worker;
    #waitForSender = new Map();
    #pool = new Map();
    constructor(worker) {
        this.#worker = worker;
        this.#worker.addEventListener("message", (event) => {
            const { type, id, port } = event.data;
            if (type !== DISPATCHER_SEND)
                return;
            const waiting = this.#waitForSender.get(id);
            if (waiting) {
                waiting(port);
                this.#waitForSender.delete(id);
            }
            else {
                this.#pool.set(id, port);
            }
        });
    }
    receive(id) {
        const pooledPort = this.#pool.get(id);
        if (pooledPort) {
            this.#pool.delete(id);
            return portToStreams(pooledPort);
        }
        return portFactoryToStreams(() => {
            return new Promise((resolve) => {
                this.#waitForSender.set(id, resolve);
            });
        });
    }
    send(id) {
        const { port1, port2 } = new MessageChannel();
        this.#worker.postMessage({ type: DISPATCHER_SEND, id, port: port2 }, [
            port2,
        ]);
        return portToStreams(port1);
    }
}
export class WorkerClientTransport {
    #reader;
    #writer;
    constructor(streams) {
        this.#reader = streams.readable.getReader();
        this.#writer = streams.writable.getWriter();
    }
    createClientStream() {
        return {
            writableRequests: streamFromWriter(this.#writer),
            readableResponses: streamFromReader(this.#reader),
        };
    }
}
export class WorkerServerTransport {
    #clientStreams;
    constructor(streams) {
        this.#clientStreams = streams;
    }
    createServerStream() {
        return {
            readableRequests: this.#clientStreams
                .readable,
            writableResponses: this.#clientStreams.writable,
        };
    }
}
//# sourceMappingURL=worker.js.map