/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
export const getSchemaType = (value) => {
    if (value === null || value === undefined) {
        return "null";
    }
    if (Array.isArray(value)) {
        return "array";
    }
    return typeof value;
};
export class SchemaBuilder {
    additionalProperties = false;
    required = [];
    properties = {};
    build() {
        const result = {
            type: "object",
            properties: this.properties,
            additionalProperties: this.additionalProperties,
        };
        if (this.required.length > 0) {
            result.required = this.required;
        }
        return result;
    }
    setAdditionalProperties(additionalProperties) {
        if (additionalProperties !== undefined) {
            this.additionalProperties = additionalProperties;
        }
        return this;
    }
    addInputs(inputs) {
        if (!inputs)
            return this;
        Object.entries(inputs).forEach(([name, value]) => {
            this.addProperty(name, { type: getSchemaType(value) });
        });
        return this;
    }
    addProperty(name, schema) {
        this.properties[name] = schema;
        return this;
    }
    addProperties(properties) {
        Object.entries(properties).forEach(([name, schema]) => {
            this.addProperty(name, schema);
        });
        return this;
    }
    addRequired(required) {
        if (!required)
            return this;
        if (typeof required === "string") {
            this.required = [...this.required, required];
        }
        else if (Array.isArray(required) && required.length > 0) {
            this.required = [...this.required, ...required];
        }
        return this;
    }
    static empty(additionalProperties = false) {
        return new SchemaBuilder()
            .setAdditionalProperties(additionalProperties)
            .build();
    }
}
//# sourceMappingURL=schema.js.map