/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { GenericKit, KitConstructor, NodeHandler, NodeHandlers } from "../types.js";
export type KitBuilderOptions = {
    url: string;
    title?: string;
    description?: string;
    version?: string;
    namespacePrefix?: string;
};
type FunctionsKeysOnly<T> = ({
    [P in keyof T]: T[P] extends (...args: any[]) => void ? P : never;
})[keyof T];
type FunctionsOnly<T> = Pick<T, FunctionsKeysOnly<T>>;
export declare class KitBuilder {
    #private;
    url: string;
    title?: string;
    description?: string;
    version?: string;
    namespacePrefix?: string;
    constructor({ title, description, version, url, namespacePrefix, }: KitBuilderOptions);
    build<Handlers extends NodeHandlers>(handlers: Handlers): KitConstructor<GenericKit<Handlers>>;
    static wrap<F extends Record<string, Function>>(params: KitBuilderOptions, functions: F): KitConstructor<GenericKit<{
        [x in keyof FunctionsOnly<F>]: NodeHandler;
    }>>;
}
export {};
//# sourceMappingURL=builder.d.ts.map