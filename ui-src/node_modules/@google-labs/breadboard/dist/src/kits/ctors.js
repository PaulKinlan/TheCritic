/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { Node } from "../node.js";
/**
 * Takes a kit constructor and creates a kit instance that can be used at
 * run-time.
 *
 * @param ctor Kit constructor
 * @returns A kit instance prepare for run-time use.
 */
export const asRuntimeKit = (ctor) => {
    return new ctor({
        create: () => {
            throw Error("Node instantiation can't (yet) happen during runtime");
        },
    });
};
/**
 * Takes a kit constructor and creates a kit instance that can be used at
 * compose-time (wiring the graph).
 * @param ctor Kit constructor
 * @param board The board with which the kit is associated.
 * @returns Kit instance prepared for compose-time use.
 */
export const asComposeTimeKit = (ctor, board) => {
    return new ctor({
        create: (...args) => {
            return new Node(board, ...args);
        },
        getConfigWithLambda: (config) => {
            return getConfigWithLambda(board, config);
        },
    });
};
/**
 * Synctactic sugar for node factories that accept lambdas. This allows passing
 * either
 *  - A JS function that is a lambda function defining the board
 *  - A board capability, i.e. the result of calling lambda()
 *  - A board node, which should be a node with a `board` output
 * or
 *  - A regular config, with a `board` property with any of the above.
 *
 * @param config {ConfigOrLambda} the overloaded config
 * @returns {NodeConfigurationConstructor} config with a board property
 */
const getConfigWithLambda = (board, config) => {
    // Did we get a graph?
    const gotGraph = config.nodes !== undefined &&
        config.edges !== undefined &&
        config.kits !== undefined;
    // Look for functions, nodes and board capabilities.
    const gotBoard = gotGraph ||
        typeof config === "function" ||
        config instanceof Node ||
        (config.kind === "board" &&
            config.board);
    const result = (gotBoard
        ? { board: gotGraph ? { kind: "board", board: config } : config }
        : config);
    // Convert passed JS function into a board node.
    if (typeof result.board === "function")
        result.board = board.lambda(result.board);
    return result;
};
//# sourceMappingURL=ctors.js.map