/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { Scope } from "../runner/scope.js";
import { swapCurrentContextScope } from "./default-scope.js";
/**
 * Adds syntactic sugar to support unproxying and serialization of nodes/graphs.
 */
export class BuilderScope extends Scope {
    #isSerializing;
    #closureEdges = [];
    parentLambdaNode;
    // TODO:BASE, config of subclasses can have more fields
    constructor(config = {}) {
        super(config);
        this.#isSerializing = config.serialize ?? false;
        this.parentLambdaNode = config.parentLambda;
    }
    async serialize(metadata, node) {
        return super.serialize(metadata, node && typeof node.unProxy === "function"
            ? node.unProxy()
            : node);
    }
    serializing() {
        return this.#isSerializing;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    asScopeFor(fn) {
        return ((...args) => {
            const oldScope = swapCurrentContextScope(this);
            try {
                return fn(...args);
            }
            finally {
                swapCurrentContextScope(oldScope);
            }
        });
    }
    addClosureEdge(edge) {
        this.#closureEdges.push(edge);
    }
    getClosureEdges() {
        return this.#closureEdges;
    }
}
//# sourceMappingURL=scope.js.map