/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import type { NodeTypeIdentifier, Kit, Breadboard, BreadboardNode, NodeConfigurationConstructor } from "./types.js";
export type PartialEdge = {
    out?: string;
    in?: string;
    optional?: boolean;
    constant?: boolean;
};
type ParsedSpec = {
    ltr: boolean;
    edge?: PartialEdge;
};
/**
 * Parses a given string according to the following grammar:
 * *|[{out}[->{in}][?|.]]
 * - if "*" is specified, this is all-value wiring. All available output values
 * will pass through this edge as input values.
 * - if "out" is not specified, this is an empty string, which means control-only
 * edge. No data passes through this edge.
 * - if "in" is not specified, "in" is assumed to be of the same value
 * as "out".
 * - if "?" is specified, this is an optional edge.
 * - if "." is specified, this is a constant edge.
 */
export declare const parseSpec: (spec: string) => ParsedSpec;
export declare const hasValues: (configuration: NodeConfigurationConstructor) => boolean;
export declare class Node<Inputs, Outputs> implements BreadboardNode<Inputs, Outputs> {
    #private;
    constructor(breadboard: Breadboard, kit: Kit | undefined, type: NodeTypeIdentifier, configuration?: NodeConfigurationConstructor, id?: string);
    wire<ToInputs, ToOutputs>(spec: string, to: BreadboardNode<ToInputs, ToOutputs>): BreadboardNode<Inputs, Outputs>;
    get id(): string;
}
export {};
//# sourceMappingURL=node.d.ts.map