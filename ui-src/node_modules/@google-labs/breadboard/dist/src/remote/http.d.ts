/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { ClientBidirectionalStream, ClientTransport, ServerBidirectionalStream, ServerTransport } from "./protocol.js";
/**
 * Minimal interface in the shape of express.js's request object.
 */
export type ServerRequest<Request> = {
    body: Request;
};
/**
 * Minimal interface in the shape of express.js's response object.
 */
export type ServerResponse = {
    header(field: string, value: string): unknown;
    write: (chunk: unknown) => boolean;
    end: () => unknown;
};
export declare const parseWithStreamsTransform: () => TransformStream<any, any>;
export declare class HTTPServerTransport<Request, Response> implements ServerTransport<Request, Response> {
    #private;
    constructor(request: ServerRequest<Request>, response: ServerResponse);
    createServerStream(): ServerBidirectionalStream<Request, Response>;
}
export type HTTPClientTransportOptions = RequestInit & {
    fetch?: typeof globalThis.fetch;
};
export declare class HTTPClientTransport<Request, Response> implements ClientTransport<Request, Response> {
    #private;
    constructor(url: string, options?: HTTPClientTransportOptions);
    createClientStream(): ClientBidirectionalStream<Request, Response>;
}
//# sourceMappingURL=http.d.ts.map