/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
type AsyncGenNext<T> = (value: T) => Promise<void>;
type AsyncGenCallback<T> = (next: AsyncGenNext<T>) => Promise<void>;
export declare const asyncGenOld: <T>(callback: AsyncGenCallback<T>) => {
    [Symbol.asyncIterator](): AsyncIterator<T, void, unknown>;
};
declare class AsyncGenIterator<T> implements AsyncIterator<T, void, unknown> {
    #private;
    constructor(callback: AsyncGenCallback<T>);
    next(): Promise<IteratorResult<T, void>>;
}
/**
 * Converts async/await style code into an async generator.
 * Useful when you need to combine arrow-style functions and yield.
 *
 * Example:
 *
 * ```ts
 * async function* foo() {
 *   yield 1;
 *   yield* asyncGen(async (next) => {
 *     await next(2);
 *     await next(3);
 *   });
 *   yield 4;
 * }
 *
 * for await (const val of foo()) {
 *   console.log(val);
 * }
 * ```
 *
 * This code will print:
 *
 * ```
 * 1
 * 2
 * 3
 * 4
 * ```
 *
 * @param callback A callback that will be called with a `next` function.
 * The callback should call `next` with the next value to yield.
 * @returns An async generator.
 */
export declare const asyncGen: <T>(callback: AsyncGenCallback<T>) => {
    [Symbol.asyncIterator](): AsyncGenIterator<T>;
};
export {};
//# sourceMappingURL=async-gen.d.ts.map