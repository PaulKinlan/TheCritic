/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import type { Edge, NodeDescriptor, NodeHandlers, InputValues, GraphDescriptor, OutputValues, GraphMetadata, SubGraphs, BreadboardRunner, BreadboardSlotSpec, Kit, BreadboardValidator, NodeHandlerContext, BreadboardCapability } from "./types.js";
import { RunResult } from "./run.js";
import { runRemote } from "./remote.js";
/**
 * This class is the main entry point for running a board.
 *
 * It contains everything that is needed to run a board, either loaded from a
 * serialized board or created via the {Board} class.
 *
 * See the {Board} class for a way to build a board that can also be serialized.
 */
export declare class BoardRunner implements BreadboardRunner {
    #private;
    url?: string;
    title?: string;
    description?: string;
    $schema?: string;
    version?: string;
    edges: Edge[];
    nodes: NodeDescriptor[];
    kits: Kit[];
    graphs?: SubGraphs;
    args?: InputValues;
    /**
     *
     * @param metadata - optional metadata for the board. Use this parameter
     * to provide title, description, version, and URL for the board.
     */
    constructor({ url, title, description, version, $schema }?: GraphMetadata);
    /**
     * Runs the board. This method is an async generator that
     * yields the results of each stage of the run.
     *
     * Conceptually, when we ask the board to run, it will occasionally pause
     * and give us a chance to interact with it.
     *
     * It's typically used like this:
     *
     * ```js
     * for await (const stop of board.run()) {
     * // do something with `stop`
     * }
     * ```
     *
     * The `stop` iterator result will be a `RunResult` and provide ability
     * to influence running of the board.
     *
     * The two key use cases are providing input and receiving output.
     *
     * If `stop.type` is `input`, the board is waiting for input values.
     * When that is the case, use `stop.inputs` to provide input values.
     *
     * If `stop.type` is `output`, the board is providing output values.
     * When that is the case, use `stop.outputs` to receive output values.
     *
     * See [Chapter 8: Continuous runs](https://github.com/breadboard-ai/breadboard/tree/main/packages/breadboard/docs/tutorial#chapter-8-continuous-runs) of Breadboard tutorial for an example of how to use this method.
     *
     * @param probe - an optional probe. If provided, the board will dispatch
     * events to it. See [Chapter 7: Probes](https://github.com/breadboard-ai/breadboard/tree/main/packages/breadboard/docs/tutorial#chapter-7-probes) of the Breadboard tutorial for more information.
     * @param slots - an optional map of slotted graphs. See [Chapter 6: Boards with slots](https://github.com/breadboard-ai/breadboard/tree/main/packages/breadboard/docs/tutorial#chapter-6-boards-with-slots) of the Breadboard tutorial for more information.
     * @param result - an optional result of a previous run. If provided, the
     * board will resume from the state of the previous run.
     * @param kits - an optional map of kits to use when running the board.
     */
    run(context?: NodeHandlerContext, result?: RunResult): AsyncGenerator<RunResult>;
    get validators(): BreadboardValidator[];
    /**
     * A simplified version of `run` that runs the board until the board provides
     * an output, and returns that output.
     *
     * This is useful for running boards that don't have multiple outputs
     * or the the outputs are only expected to be visited once.
     *
     * @param inputs - the input values to provide to the board.
     * @param probe - an optional probe. If provided, the board will dispatch
     * events to it. See [Chapter 7: Probes](https://github.com/breadboard-ai/breadboard/tree/main/packages/breadboard/docs/tutorial#chapter-7-probes) of the Breadboard tutorial for more information.
     * @param slots - an optional map of slotted graphs. See [Chapter 6: Boards with slots](https://github.com/breadboard-ai/breadboard/tree/main/packages/breadboard/docs/tutorial#chapter-6-boards-with-slots) of the Breadboard tutorial for more information.
     * @param kits - an optional map of kits to use when running the board.
     * @returns - outputs provided by the board.
     */
    runOnce(inputs: InputValues, context?: NodeHandlerContext): Promise<OutputValues>;
    /**
     * Add validator to the board.
     * Will call .addGraph() on the validator before executing a graph.
     *
     * @param validator - a validator to add to the board.
     */
    addValidator(validator: BreadboardValidator): void;
    /**
     * Returns a [Mermaid](https://mermaid-js.github.io/mermaid/#/) representation
     * of the board.
     *
     * This is useful for visualizing the board.
     *
     * @returns - a string containing the Mermaid representation of the board.
     */
    mermaid(direction?: string, unstyled?: boolean, ignoreSubgraphs?: boolean): string;
    /**
     * Creates a new board from JSON. If you have a serialized board, you can
     * use this method to turn it into into a new Board instance.
     *
     * @param graph - the JSON representation of the board.
     * @returns - a new `Board` instance.
     */
    static fromGraphDescriptor(graph: GraphDescriptor): Promise<BoardRunner>;
    /**
     * Loads a board from a URL or a file path.
     *
     * @param url - the URL or a file path to the board.
     * @param slots - optional slots to provide to the board.
     * @returns - a new `Board` instance.
     */
    static load(url: string, options: {
        base: URL;
        slotted?: BreadboardSlotSpec;
        outerGraph?: GraphDescriptor;
    }): Promise<BoardRunner>;
    /**
     * Creates a runnable board from a BreadboardCapability,
     * @param board {BreadboardCapability} A BreadboardCapability including a board
     * @returns {Board} A runnable board.
     */
    static fromBreadboardCapability(board: BreadboardCapability): Promise<BoardRunner>;
    static handlersFromBoard(board: BoardRunner, upstreamKits?: Kit[]): Promise<NodeHandlers>;
    static runRemote: typeof runRemote;
}
//# sourceMappingURL=runner.d.ts.map