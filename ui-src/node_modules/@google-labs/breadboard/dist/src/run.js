/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { loadRunnerState, saveRunnerState } from "./serialization.js";
import { timestamp } from "./timestamp.js";
export class RunResult {
    #type;
    #state;
    // TODO: Remove #state and rename this to #state
    #runState;
    // TODO: Remove this once RunState machinery works
    #invocationId;
    constructor(state, type, runState, invocationId) {
        this.#state = state;
        this.#type = type;
        this.#runState = runState;
        this.#invocationId = invocationId;
    }
    get invocationId() {
        return this.#invocationId;
    }
    get type() {
        return this.#type;
    }
    get node() {
        return this.#state.descriptor;
    }
    get inputArguments() {
        return this.#state.inputs;
    }
    set inputs(inputs) {
        this.#state.outputsPromise = Promise.resolve(inputs);
    }
    get outputs() {
        return this.#state.inputs;
    }
    get state() {
        return this.#state;
    }
    async save() {
        return saveRunnerState(this.#type, this.#state);
    }
    get runState() {
        return this.#runState;
    }
    get timestamp() {
        return timestamp();
    }
    isAtExitNode() {
        return (this.#state.newOpportunities.length === 0 &&
            this.#state.opportunities.length === 0 &&
            this.#state.pendingOutputs.size === 0);
    }
    static load(stringifiedResult) {
        const { state, type } = loadRunnerState(stringifiedResult);
        return new RunResult(state, type, undefined, 0);
    }
}
export class InputStageResult extends RunResult {
    constructor(state, runState, invocationId) {
        super(state, "input", runState, invocationId);
    }
    get outputs() {
        throw new Error('Outputs are not available in the "input" stage');
    }
}
export class OutputStageResult extends RunResult {
    constructor(state, invocationId) {
        super(state, "output", undefined, invocationId);
    }
    get inputArguments() {
        throw new Error('Input arguments are not available in the "output" stage');
    }
    set inputs(inputs) {
        throw new Error('Setting inputs is not available in the "output" stage');
    }
}
//# sourceMappingURL=run.js.map