/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { Board, } from "@google-labs/breadboard";
export default async (inputs, context) => {
    const { list, board, accumulator } = inputs;
    if (!Array.isArray(list)) {
        throw new Error(`Expected list to be an array, but got ${list}`);
    }
    if (!board)
        return { accumulator };
    const runnableBoard = await Board.fromBreadboardCapability(board);
    let result = accumulator;
    let index = 0;
    for (const item of list) {
        const newContext = {
            ...context,
            invocationPath: [...(context?.invocationPath || []), index++],
        };
        const { accumulator } = await runnableBoard.runOnce({ item, accumulator: result }, newContext);
        result = accumulator;
    }
    return { accumulator: result };
};
//# sourceMappingURL=reduce.js.map