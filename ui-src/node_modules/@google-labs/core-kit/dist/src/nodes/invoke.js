/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { BoardRunner } from "@google-labs/breadboard";
import { SchemaBuilder } from "@google-labs/breadboard/kits";
export const relativeBaseURL = (context) => {
    const invokingBoardURL = context.board?.url;
    if (invokingBoardURL)
        return new URL(invokingBoardURL);
    if (context.base)
        return context.base;
    return new URL(import.meta.url);
};
export const loadBoardFromPath = async (path, context) => {
    const base = relativeBaseURL(context);
    const outerGraph = context.outerGraph;
    return await BoardRunner.load(path, { base, outerGraph });
};
const getRunnableBoard = async (context, path, board, graph) => {
    if (board)
        return await BoardRunner.fromBreadboardCapability(board);
    if (graph)
        return await BoardRunner.fromGraphDescriptor(graph);
    if (path)
        return await loadBoardFromPath(path, context);
    return undefined;
};
const isBreadboardCapability = (candidate) => {
    const board = candidate;
    return (board &&
        typeof board === "object" &&
        board.kind === "board" &&
        board.board &&
        isGraphDescriptor(board.board));
};
const isGraphDescriptor = (candidate) => {
    const graph = candidate;
    return (graph && typeof graph === "object" && graph.nodes && graph.edges && true);
};
export default {
    describe: async (inputs) => ({
        inputSchema: new SchemaBuilder()
            .setAdditionalProperties(true)
            .addInputs(inputs)
            .addProperties({
            path: {
                title: "path",
                description: "The path to the board to invoke.",
                type: "string",
            },
            board: {
                title: "board",
                description: "The board to invoke, created by `lambda` or `import`",
                type: "BoardCapability",
            },
            graph: {
                title: "graph",
                description: "The graph descriptor of the board to invoke.",
                type: "object",
            },
            $board: {
                title: "board",
                description: "The board to invoke. Can be a BoardCapability, a graph or a URL",
                type: "string", // TODO: Make this a union type
            },
        })
            .build(),
        outputSchema: new SchemaBuilder().setAdditionalProperties(true).build(),
    }),
    invoke: async (inputs, context) => {
        const { $board, ...args } = inputs;
        if ($board) {
            let board;
            if (isBreadboardCapability($board))
                board = await BoardRunner.fromBreadboardCapability($board);
            if (isGraphDescriptor($board))
                board = await BoardRunner.fromGraphDescriptor($board);
            if (typeof $board === "string") {
                board = await loadBoardFromPath($board, context);
            }
            else {
                board = undefined;
            }
            if (!board)
                throw new Error("No board provided");
            return await board.runOnce(args, context);
        }
        else {
            const { path, board, graph, ...args } = inputs;
            const runnableBoard = await getRunnableBoard(context, path, board, graph);
            if (!runnableBoard)
                throw new Error("No board provided");
            return await runnableBoard.runOnce(args, context);
        }
    },
};
//# sourceMappingURL=invoke.js.map