/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
const environment = () => typeof globalThis.process !== "undefined"
    ? "node"
    : typeof globalThis.window !== "undefined"
        ? "browser"
        : "worker";
const getEnvironmentValue = async (key) => {
    const env = environment();
    if (env === "node") {
        return process.env[key];
    }
    else if (env === "browser") {
        // How do we avoid namespace clashes?
        return globalThis.localStorage.getItem(key);
    }
    else if (env === "worker") {
        // TODO: Calling main thread is a general pattern, figure out a way to
        // avoid a special call here. Maybe some Board util?
        throw new Error("Secrets are not yet supported in workers. Please proxy these nodes to the main thread.");
    }
};
export const requireNonEmpty = (key, value) => {
    if (!value)
        throw new Error(`Key "${key}" was not specified. Please check your environment and make sure it is set.`);
    return value;
};
export const secretsDescriber = async (inputs) => {
    const { keys } = (inputs ? inputs : {});
    const properties = keys
        ? Object.fromEntries(keys.map((key) => [
            key,
            {
                title: key,
            },
        ]))
        : {};
    return {
        inputSchema: {
            properties: {
                keys: {
                    title: "secrets",
                    description: "The array of secrets to retrieve from the node.",
                    type: "array",
                    items: {
                        type: "string",
                    },
                },
            },
        },
        outputSchema: {
            properties,
        },
    };
};
export default {
    describe: secretsDescriber,
    invoke: async (inputs) => {
        const { keys = [] } = inputs;
        return Object.fromEntries(await Promise.all(keys.map(async (key) => [
            key,
            requireNonEmpty(key, await getEnvironmentValue(key)),
        ])));
    },
};
//# sourceMappingURL=secrets.js.map