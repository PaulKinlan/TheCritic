{"version":3,"file":"a-critic.js","sourceRoot":"","sources":["../../../ui-src/ui/a-critic.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,OAAQ,SAAQ,WAAW;IACtC,KAAK,CAAa;IAElB,MAAM,KAAK,kBAAkB;QAC3B,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC7B,CAAC;IAED,wBAAwB,CAAC,IAAY,EAAE,QAAgB,EAAE,QAAgB;QACvE,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;YACvB,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAC7C,IAAI,IAAI,EAAE,CACY,CAAC;YACzB,IAAI,cAAc,KAAK,IAAI;gBAAE,OAAO;YAEpC,cAAc,CAAC,SAAS,GAAG,QAAQ,CAAC;QACtC,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxE,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,IAAI,CAAC,KAAK;QACZ,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACnC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAED,IAAI,OAAO,CAAC,KAAK;QACf,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QACtC,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAED;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG;;;;;;;;;;;;;;;;;;;;;;;uCAuBY,IAAI,CAAC,IAAI;4BACpB,IAAI,CAAC,OAAO;;;;;;;;EAQtC,CAAC;IACD,CAAC;CACF","sourcesContent":["export class ACritic extends HTMLElement {\n  #root: ShadowRoot;\n\n  static get observedAttributes() {\n    return [\"name\", \"persona\"];\n  }\n\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (name === \"persona\") {\n      const personaElement = this.#root.querySelector(\n        `#${name}`,\n      ) as HTMLTextAreaElement;\n      if (personaElement === null) return;\n\n      personaElement.innerText = newValue;\n    }\n    this.#root.querySelector(`#${name}`)?.setAttribute(\"value\", newValue);\n  }\n\n  get name() {\n    return this.getAttribute(\"name\");\n  }\n\n  set name(value) {\n    if (value) {\n      this.setAttribute(\"name\", value);\n    } else {\n      this.removeAttribute(\"name\");\n    }\n  }\n\n  get persona() {\n    return this.getAttribute(\"persona\");\n  }\n\n  set persona(value) {\n    if (value) {\n      this.setAttribute(\"persona\", value);\n    } else {\n      this.removeAttribute(\"persona\");\n    }\n  }\n\n  constructor() {\n    super();\n    this.#root = this.attachShadow({ mode: \"open\" });\n    this.#root.innerHTML = `\n\t  <style>\n\t\t:host {\n\t\t  display: block;\n\t\t}\n\n\t\tdetails ::slotted(div:empty)) {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\tdiv.config {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n      gap: var(--size-1);\n\t\t}\n\n\t\tdiv.config input {\n\t\t\tflex: 1;\n\t\t\tdisplay; block;\n\t\t}\n\n\t  </style>\n\t\t<div class=\"config\">\n\t\t\t<input type=text id=\"name\" value=\"${this.name}\">\n\t\t\t<textarea id=\"persona\">${this.persona}</textarea>\n\t\t</div>\n\t\t<div>\n\t\t\t<details>\n\t\t\t\t<summary>Response</summary>\n\t\t\t\t<slot name=response></slot>\n\t\t\t</details>\n\t\t</div>\n\t`;\n  }\n}\n"]}