{"version":3,"file":"critic.js","sourceRoot":"","sources":["../../../ui-src/boards/critic.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,MAAM,EAAE,MAAM,mCAAmC,CAAC;AAE3D,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;IACjC,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,IAKtC,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AACxC,CAAC,CAAC,CAAC;AAEH,eAAe,MAAM,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;IACtC,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,QAAQ,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3E,8EAA8E;IAC9E,iFAAiF;IACjF,UAAU;IACV,gBAAgB;IAChB,gCAAgC;IAChC,yDAAyD;IACzD,UAAU;IACV,gBAAgB;IAChB,6BAA6B;IAC7B,+CAA+C;IAE/C,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAErC,MAAM,YAAY,GAAG,SAAS,CAAC,cAAc,CAAC;QAC5C,QAAQ,EAAE;;;;;;;GAOX;QACC,IAAI;QACJ,EAAE;QACF,OAAO;QACP,OAAO;KACR,CAAC,CAAC;IAEH,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;IACtB,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;IACpB,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;IAEzB,OAAO,IAAI;SACR,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC;SACrC,EAAE,CACD,MAAM,CAAC,kBAAkB,CAAC;QACxB,KAAK,EAAE,YAAY;QACnB,IAAI,EAAE,YAAY,CAAC,MAAM;KAC1B,CAAC,CACH;SACA,UAAU,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,SAAS,CAAC;IACX,KAAK,EAAE,YAAY;IACnB,WAAW,EAAE,kBAAkB;IAC/B,OAAO,EAAE,OAAO;CACjB,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { board, base, code } from \"@google-labs/breadboard\";\nimport { core } from \"@google-labs/core-kit\";\nimport { templates } from \"@google-labs/template-kit\";\nimport { claude } from \"@paulkinlan/claude-breadboard-kit\";\n\nconst argMaker = code(({ item }) => {\n  const { name, id, article, persona } = item as {\n    name: string;\n    id: string;\n    article: string;\n    persona: string;\n  };\n  return { name, id, article, persona };\n});\n\nexport default await board(({ item }) => {\n  const { name, id, article, persona } = argMaker({ $id: \"makeArgs\", item });\n  // name.isString().title(\"Critic Name\").description(\"The name of the Critic\");\n  // id.isString().title(\"id\").description(\"The id of the critique being created\");\n  // article\n  //   .isString()\n  //   .title(\"articleToCritique\")\n  //   .description(\"The article that is being critiqued\");\n  // persona\n  //   .isString()\n  //   .title(\"Critic Persona\")\n  //   .description(\"The Persona of the Critic\");\n\n  const criticOutput = base.output({});\n\n  const criticPrompt = templates.promptTemplate({\n    template: `Your name is {{name}} and you are a {{persona}}.\n\n  You will create a markdown bulleted critique of the following input:\n\n  {{article}}\n\n  Critique:\n  `,\n    name,\n    id,\n    article,\n    persona,\n  });\n\n  name.to(criticOutput);\n  id.to(criticOutput);\n  persona.to(criticOutput);\n\n  return core\n    .secrets({ keys: [\"CLAUDE_API_KEY\"] })\n    .to(\n      claude.generateCompletion({\n        model: \"claude-2.1\",\n        text: criticPrompt.prompt,\n      }),\n    )\n    .completion.to(criticOutput);\n}).serialize({\n  title: \"The Critic\",\n  description: \"The Critic Board\",\n  version: \"0.0.1\",\n});\n"]}