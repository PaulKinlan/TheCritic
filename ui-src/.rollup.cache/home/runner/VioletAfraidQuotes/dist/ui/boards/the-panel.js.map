{"version":3,"file":"the-panel.js","sourceRoot":"","sources":["../../../ui-src/boards/the-panel.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Board,\n  BoardRunner,\n  asRuntimeKit,\n  board,\n  BreadboardCapability,\n  Schema,\n} from \"@google-labs/breadboard\";\nimport {\n  HTTPClientTransport,\n  ProxyClient,\n} from \"@google-labs/breadboard/remote\";\nimport { Core, core } from \"@google-labs/core-kit\";\nimport Critic from \"./critic.js\";\n\nimport { Probe, ProbeMessage } from \"@google-labs/breadboard\";\nimport Template, { templates } from \"@google-labs/template-kit\";\n\nexport type VerboseLoggingCallback = (message: ProbeMessage) => Promise<void>;\n\nexport type CriticResponse = {\n  id: string;\n  name: string;\n  completion: string;\n};\n\nclass VerboseLoggingProbe extends EventTarget implements Probe {\n  #callback: VerboseLoggingCallback;\n\n  constructor(callback: VerboseLoggingCallback) {\n    super();\n    this.#callback = callback;\n  }\n\n  async report(message: ProbeMessage): Promise<void> {\n    return this.#callback(message);\n  }\n}\n\nexport class Panel {\n  #critics: Record<string, { id: string; name: string; persona: string }> = {};\n\n  get board() {\n    return board(({ list, criticBoard }) => {\n      list\n        .isArray()\n        .title(\"The list of critics\")\n        .description(\"The list of critics\");\n      criticBoard.title(\"The Critic Board\").description(\"The Critic Board\");\n      return list.as(\"list\").to(core.map({ board: criticBoard }));\n    }).serialize({ title: \"The Critic Board\" });\n  }\n\n  constructor() {}\n\n  addCritic(name: string, persona: string, id?: string) {\n    if (id == null || id == undefined) {\n      id = crypto.randomUUID();\n    }\n    // Store the critic state.\n    this.#critics[id] = { id, name, persona };\n\n    return { id, name, persona };\n  }\n\n  async critique(text: string): Promise<CriticResponse[]> {\n    const board = await Board.fromGraphDescriptor(await this.board);\n    const criticBoard = await Board.fromGraphDescriptor(Critic);\n\n    const probe = new VerboseLoggingProbe(async (data) => console.log(data));\n\n    // We need to run things on the server.\n    const proxy = window.location.toString(); // current server is proxy\n    const client = new ProxyClient(new HTTPClientTransport(proxy));\n\n    const kits = [asRuntimeKit(Core), asRuntimeKit(Template)];\n    // Claude Kit is unable to run on the client so it has to be proxied.\n    kits.unshift(client.createProxyKit([\"generateCompletion\", \"secrets\"]));\n\n    const criticList = Object.values(this.#critics).map((critic) => {\n      return { article: text, ...critic };\n    });\n\n    for await (const stop of board.run({ kits, probe })) {\n      if (stop.type === \"input\") {\n        if (\n          (stop.inputArguments.schema as Schema)?.required.indexOf(\n            \"criticBoard\",\n          ) > -1\n        ) {\n          stop.inputs = {\n            criticBoard: {\n              kind: \"board\",\n              board: criticBoard,\n            } as BreadboardCapability,\n            list: criticList,\n          };\n        }\n      } else if (stop.type === \"output\") {\n        // Because we are using core.map - we can get the output and return\n        return stop.outputs.list as unknown as CriticResponse[];\n      }\n    }\n  }\n}\n"]}